#include "main.h"

/**
 * _printf - Our custom printf function.
 * @format: The string format to print.
 * Return: Number of characters printed.
 */
int _printf6(const char *format, ...)
{
    va_list args;
    int i = 0, count = 0;

    va_start(args, format);
    while (format && format[i])
    {
        if (format[i] == '%' && format[i + 1] == 'p')
        {
            print_pointer(va_arg(args, void *));
            i++;  // To skip the 'p' specifier
        }
        else
        {
            write(1, &format[i], 1);
            count++;
        }
        i++;
    }
    va_end(args);
    return (count);
}

/**
 * print_pointer - Print the address held by a pointer.
 * @ptr: Pointer to print.
 */
void print_pointer(void *ptr)
{
    unsigned long int addr = (unsigned long int)ptr;
    char base[] = "0123456789abcdef";
    char buffer[20];
    int i = 0;

    if (!ptr)
    {
        write(1, "(nil)", 5);
        return;
    }

    write(1, "0x", 2);
    while (addr)
    {
        buffer[i++] = base[addr % 16];
        addr /= 16;
    }

    // Print the buffer in reverse since we constructed it backward
    while (i--)
    {
        write(1, &buffer[i], 1);
    }
}

